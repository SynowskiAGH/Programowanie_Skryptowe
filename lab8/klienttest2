#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>

#define TCP_PORT 8080             // TCP server port
#define UDP_PORT 9090             // UDP multicast server port
#define MULTICAST_GROUP "239.0.0.1"
#define BUFFER_SIZE 1024

void handleTCPChat(int tcpSocket);
void handleUDPChat(int udpSocket);

int main() {
    int tcpSocket, udpSocket;
    struct sockaddr_in serverAddr;
    char tcpBuffer[BUFFER_SIZE];

    // Create TCP socket
    if ((tcpSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("TCP socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Create UDP socket
    if ((udpSocket = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        perror("UDP socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address for TCP connection
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(TCP_PORT);

    // Connect to the server via TCP
    if (connect(tcpSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("TCP connection failed");
        exit(EXIT_FAILURE);
    }

    // Create a new thread to handle the TCP chat
    if (fork() == 0) {
        handleTCPChat(tcpSocket);
        exit(EXIT_SUCCESS);
    }

    // Join the UDP multicast group
    struct ip_mreq multicastRequest;
    multicastRequest.imr_multiaddr.s_addr = inet_addr(MULTICAST_GROUP);
    multicastRequest.imr_interface.s_addr = htonl(INADDR_ANY);
    if (setsockopt(udpSocket, IPPROTO_IP, IP_ADD_MEMBERSHIP, &multicastRequest, sizeof(multicastRequest)) == -1) {
        perror("Joining multicast group failed");
        exit(EXIT_FAILURE);
    }

    // Create a new thread to handle the UDP chat
    if (fork() == 0) {
        handleUDPChat(udpSocket);
        exit(EXIT_SUCCESS);
    }

    printf("Connected to the server. Start typing messages:\n");

    while (1) {
        // Read message from stdin
        if (fgets(tcpBuffer, BUFFER_SIZE, stdin) == NULL) {
            perror("Failed to read input");
            break;
        }

        // Remove newline character from the end of the message
        tcpBuffer[strcspn(tcpBuffer, "\n")] = '\0';

        // Send the message over TCP to the server
        ssize_t bytesSent = send(tcpSocket, tcpBuffer, strlen(tcpBuffer), 0);
        if (bytesSent == -1) {
            perror("TCP send failed");
            break;
        }

        // If the message is "/quit", exit the loop and terminate the client
        if (strcmp(tcpBuffer, "/quit") == 0) {
            break;
        }
    }

    // Close sockets
    close(tcpSocket);
    close(udpSocket);

    return 0;
}

void handleTCPChat(int tcpSocket) {
    char tcpBuffer[BUFFER_SIZE];

    while (1) {
        // Receive message over TCP from the server
        ssize_t bytesRead = recv(tcpSocket, tcpBuffer, BUFFER_SIZE - 1, 0);
        if (bytesRead == -1) {
            perror("TCP receive failed");
            break;
        } else if (bytesRead == 0) {
            printf("Disconnected from the server.\n");
            break;
        }

        // Null-terminate the received message
        tcpBuffer[bytesRead] = '\0';

        // Print the received message
        printf("Server: %s\n", tcpBuffer);
    }
}

void handleUDPChat(int udpSocket) {
    struct sockaddr_in serverAddr;
    char udpBuffer[BUFFER_SIZE];

    // Configure server address for UDP multicast
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = inet_addr(MULTICAST_GROUP);
    serverAddr.sin_port = htons(UDP_PORT);

    while (1) {
        // Receive message over UDP multicast from the server
        ssize_t bytesRead = recvfrom(udpSocket, udpBuffer, BUFFER_SIZE - 1, 0, NULL, NULL);
        if (bytesRead == -1) {
            perror("UDP receive failed");
            break;
        } else if (bytesRead == 0) {
            printf("Disconnected from the multicast group.\n");
            break;
        }

        // Null-terminate the received message
        udpBuffer[bytesRead] = '\0';

        // Print the received message
        printf("Server: %s\n", udpBuffer);
    }
}
