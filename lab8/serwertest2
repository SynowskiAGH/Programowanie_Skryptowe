#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <fcntl.h>

#define TCP_PORT 8080             // TCP server port
#define UDP_PORT 9090             // UDP multicast server port
#define MULTICAST_GROUP "239.0.0.1"
#define BUFFER_SIZE 1024
#define MAX_CLIENTS 10

typedef struct {
    int socket;
    struct sockaddr_in address;
} Client;

Client clients[MAX_CLIENTS];
int connectedClientsCount = 0;

void broadcastMessage(char *message);

int main() {
    int tcpSocket, udpSocket, newSocket;
    struct sockaddr_in serverAddr, clientAddr;
    socklen_t addrLen = sizeof(clientAddr);
    char tcpBuffer[BUFFER_SIZE];

    // Create TCP socket
    if ((tcpSocket = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("TCP socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Create UDP socket
    if ((udpSocket = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
        perror("UDP socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Set SO_REUSEADDR option for TCP socket
    int reuse = 1;
    if (setsockopt(tcpSocket, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) == -1) {
        perror("TCP setsockopt(SO_REUSEADDR) failed");
        exit(EXIT_FAILURE);
    }

    // Set SO_REUSEADDR option for UDP socket
    if (setsockopt(udpSocket, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) == -1) {
        perror("UDP setsockopt(SO_REUSEADDR) failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address for TCP connection
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(TCP_PORT);

    // Bind TCP socket to the server address
    if (bind(tcpSocket, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {
        perror("TCP bind failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address for UDP multicast
    struct sockaddr_in udpAddr;
    udpAddr.sin_family = AF_INET;
    udpAddr.sin_addr.s_addr = inet_addr(MULTICAST_GROUP);
    udpAddr.sin_port = htons(UDP_PORT);

    // Join the UDP multicast group
    if (setsockopt(udpSocket, IPPROTO_IP, IP_ADD_MEMBERSHIP, &udpAddr, sizeof(udpAddr)) == -1) {
        perror("Joining multicast group failed");
        exit(EXIT_FAILURE);
    }

    // Listen for TCP connections
    if (listen(tcpSocket, MAX_CLIENTS) == -1) {
        perror("TCP listen failed");
        exit(EXIT_FAILURE);
    }

    printf("Server started. Listening for connections...\n");

    while (1) {
        // Accept a new TCP connection
        if ((newSocket = accept(tcpSocket, (struct sockaddr *)&clientAddr, &addrLen)) == -1) {
            perror("TCP accept failed");
            exit(EXIT_FAILURE);
        }

        // Add the new client to the clients array
        Client newClient;
        newClient.socket = newSocket;
        newClient.address = clientAddr;
        clients[connectedClientsCount] = newClient;
        connectedClientsCount++;

        printf("New client connected. Client count: %d\n", connectedClientsCount);

        // Create a new thread to handle the TCP connection for this client
        if (fork() == 0) {
            close(tcpSocket); // Child process doesn't need the listener socket

            // Handle TCP chat for this client
            handleTCPChat(newSocket);

            // Remove the client from the clients array
            for (int i = 0; i < connectedClientsCount; i++) {
                if (clients[i].socket == newSocket) {
                    close(clients[i].socket);
                    for (int j = i; j < connectedClientsCount - 1; j++) {
                        clients[j] = clients[j + 1];
                    }
                    connectedClientsCount--;
                    break;
                }
            }

            printf("Client disconnected. Client count: %d\n", connectedClientsCount);
            exit(EXIT_SUCCESS);
        } else {
            close(newSocket); // Parent process doesn't need the new socket
        }
    }

    // Close sockets
    close(tcpSocket);
    close(udpSocket);

    return 0;
}

void handleTCPChat(int tcpSocket) {
    char tcpBuffer[BUFFER_SIZE];

    while (1) {
        // Receive message over TCP from the client
        ssize_t bytesRead = recv(tcpSocket, tcpBuffer, BUFFER_SIZE - 1, 0);
        if (bytesRead == -1) {
            perror("TCP receive failed");
            break;
        }

        // Null-terminate the received message
        tcpBuffer[bytesRead] = '\0';

        // If the message is "/quit", exit the loop and terminate the client
        if (strcmp(tcpBuffer, "/quit") == 0) {
            break;
        }

        // Broadcast the message to all clients
        broadcastMessage(tcpBuffer);
    }
}

void broadcastMessage(char *message) {
    for (int i = 0; i < connectedClientsCount; i++) {
        // Send the message over UDP to each client
        ssize_t bytesSent = sendto(udpSocket, message, strlen(message), 0, (struct sockaddr *)&(clients[i].address), sizeof(clients[i].address));
        if (bytesSent == -1) {
            perror("UDP send failed");
        }
    }
}
